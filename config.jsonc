{
  // 版本号
  // 用于程序更新检查，请不要手动修改。
  "version": "2.7.6",

  // --- 会话设置 ---
  // 当前 LMArena 页面的会话 ID。
  // 通过运行 id_updater.py 可以自动更新。
  "session_id": "cebc557a-3f35-4794-beaf-6e33d947e0cd",

  // 当前会话的最后一条消息 ID。
  // 通过运行 id_updater.py 可以自动更新。
  "message_id": "562414bc-0ea8-412a-bd15-8ec1cc61f4af",

  // --- ID 更新器专用配置 ---
  // id_updater.py 上次使用的模式 ('direct_chat' 或 'battle')
  "id_updater_last_mode": "battle",
  // id_updater.py 在 Battle 模式下，要更新的目标 ('A' 或 'B')
  "id_updater_battle_target": "B",

  // --- 更新设置 ---
  // 开关：自动检查更新
  // 设置为 true，程序启动时会连接到 GitHub 检查新版本。
  "enable_auto_update": true,

  // --- 功能开关 ---

  // 功能开关：绕过敏感词检测
  // 在原始用户请求的对话中，额外注入一个内容为空的用户消息，以尝试绕过敏感词审查。
  "bypass_enabled": true,

  // 功能开关：酒馆模式 (Tavern Mode)
  // 此模式专为需要完整历史记录注入的场景设计（如酒馆AI、SillyTavern等）。
  "tavern_mode_enabled": false,

  // --- 文件床设置 ---
  // 开关：启用文件床
  // 设置为 true 时，所有图片等多媒体附件将首先上传到您自建的文件床服务器，
  // 然后将返回的 URL 用于后续请求，而不是直接发送 base64 数据。
  "file_bed_enabled": false,

  // 文件床上传API的URL
  // 这是您 file_bed_server/main.py 服务的 /upload 端点地址。
  // 注意: 为了兼容可能存在的旧版解析器，建议将 // 转义为 \/\/
  "file_bed_upload_url": "http:\/\/127.0.0.1:5180/upload",

  // 文件床 API Key
  // 如果您在 file_bed_server/main.py 中设置了 API_KEY，请在此处填写。
  "file_bed_api_key": "your_secret_api_key",

  // --- 模型映射设置 ---

  // 开关：当模型映射不存在时，使用默认ID
  // 如果设置为 true，当请求的模型在 model_endpoint_map.json 中找不到时，
  // 将会使用 config.jsonc 中定义的全局 session_id 和 message_id。
  // 如果设置为 false，找不到映射时将返回错误。
  "use_default_ids_if_mapping_not_found": true,

  // --- 高级设置 ---

  // 流式响应超时时间（秒）
  // 服务器等待来自浏览器的下一个数据块的最长时间。非流式也使用此值。
  // 如果您的网络连接较慢或模型响应时间很长，可以适当增加此值。
  "stream_response_timeout_seconds": 360,

  // --- 自动重启设置 ---

  // 开关：启用空闲自动重启
  // 当服务器在指定时间内（如下所设）没有收到任何 API 请求时，将自动重启。
  "enable_idle_restart": true,

  // 空闲重启超时时间（秒）
  // 服务器在“检查与更新完毕”后，若超过此时长未收到任何请求，则会重启。
  // 5分钟 = 300秒。设置为 -1 可禁用此超时功能（即使上面开关为true）。
  "idle_restart_timeout_seconds": -1,

  // --- 安全设置 ---

  // 使用 Dashboard Token 系统
  // 启用后，将使用 dashboard 的多用户 token 系统进行身份验证和使用跟踪。
  // 如果禁用，将回退到简单的 API Key 验证。
  "use_dashboard_tokens": true,

  // API Key
  // 设置一个 API Key 来保护您的服务。
  // 如果设置了此值，所有到 /v1/chat/completions 的请求都必须在 Authorization 头部中包含正确的 Bearer Token。
  // 注意：如果 use_dashboard_tokens 为 true，系统将优先使用 dashboard tokens，此 API Key 将作为备用选项。
  "api_key": "",

  // --- 云部署设置 (Cloud Deployment) ---

  // 部署模式
  // "local": 传统单机模式，WebSocket 仅监听 localhost
  // "cloud": 云部署模式，允许远程 worker 连接
  "deployment_mode": "cloud",

  // Worker 设置
  "worker_settings": {
    // 是否需要 worker 认证
    "require_authentication": true,
    
    // 心跳间隔（秒）
    // Worker 应该在此间隔内发送心跳信号
    "heartbeat_interval_seconds": 30,
    
    // 最大 worker 数量
    "max_workers": 10,
    
    // Worker 超时时间（秒）
    // 如果 worker 在此时间内未发送心跳，将被视为不健康
    "worker_timeout_seconds": 120,
    
    // 有效的 worker 认证令牌列表
    // 在云部署模式下，worker 必须使用这些令牌之一进行认证
    // 示例: ["token-abc-123", "token-def-456"]
    "valid_tokens": []
  },

  // 请求队列设置
  "queue_settings": {
    // 请求在队列中的最大等待时间（秒）
    "max_wait_seconds": 60,
    
    // 当没有可用 worker 时是否立即拒绝请求
    // true: 立即返回 503 错误
    // false: 将请求加入队列等待
    "reject_when_no_workers": true
  },

  // 云服务器设置（仅在 deployment_mode 为 "cloud" 时使用）
  "cloud_settings": {
    // 公开的 WebSocket URL (wss://)
    // Worker 将连接到此地址
    "public_ws_url": "wss://your-app.render.com/ws/worker",
    
    // CORS 允许的来源
    "cors_allowed_origins": ["*"]
  }
}
